/* eslint-disable prettier/prettier */
import express from 'express';
import axios from 'axios';
import { AuthService } from '../auth/auth.service';
import { LimitsService } from '../limits/limits.service';
import { TenantsService } from '../tenants/tenants.service';
import { AuditService } from '../audit/audit.service';
import { TenantConnectionService } from '../services/tenant-connection.service';
import { JwtService } from '@nestjs/jwt';
import { UsersService } from '../users/users.service';

export class HttpProxyServer {
    private app: express.Application;
    private authService: AuthService;
    private limitsService: LimitsService;
    private tenantsService: TenantsService;
    private auditService: AuditService;
    private tenantConnectionService: TenantConnectionService;
    private jwtService: JwtService;
    private usersService: UsersService;

    constructor(
        authService: AuthService,
        limitsService: LimitsService,
        tenantsService: TenantsService,
        auditService: AuditService,
        tenantConnectionService: TenantConnectionService,
        jwtService: JwtService,
        usersService: UsersService
    ) {
        this.authService = authService;
        this.limitsService = limitsService;
        this.tenantsService = tenantsService;
        this.auditService = auditService;
        this.tenantConnectionService = tenantConnectionService;
        this.jwtService = jwtService;
        this.usersService = usersService;

        this.app = express();
        this.app.use(express.json());
        this.setupProxy();
    }

    private setupProxy() {
        this.app.use('/mongo/*', async (req, res) => {
            try {
                console.log('üîÑ [HTTP Proxy] Request intercepted:', req.method, req.path);
                const authResult = await this.checkAuthentication(req);
                if (!authResult.success || !authResult.tenantId) {
                    return res.status(401).json(authResult);
                }
                const tenantResult = await this.checkTenant(req, authResult.tenantId);
                if (!tenantResult.success) {
                    return res.status(403).json(tenantResult);
                }
                const limitsResult = await this.checkDataLimits(req, authResult.tenantId);
                if (!limitsResult.success) {
                    return res.status(429).json(limitsResult);
                }
                const modifiedBody = this.modifyRequest(req, authResult.tenantId);

                const mongoResponse = await this.forwardToMongoDB(req, authResult.tenantId, modifiedBody);

                await this.logRequest(req, authResult.tenantId, mongoResponse);
                res.json(mongoResponse);

            } catch (error) {
                console.error('‚ùå [HTTP Proxy] Error:', error);
                res.status(500).json({
                    success: false,
                    error: 'Proxy error',
                    message: error.message
                });
            }
        });

        // Health check
        this.app.get('/proxy/health', (req, res) => {
            res.json({ status: 'HTTP Proxy Server is running!' });
        });
    }

    private async checkAuthentication(req: express.Request) {
        try {
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º X-Tenant-ID –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            const headerTenantId = req.headers['x-tenant-id'] as string;
            if (headerTenantId) {
                console.log(`üîç [Proxy] Uses tenantId from header: ${headerTenantId}`);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–Ω–∞–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                const tenant = await this.tenantsService.getTenantById(headerTenantId);
                if (tenant) {
                    return {
                        success: true,
                        tenantId: headerTenantId,
                        userId: 'from-header',
                        source: 'header'
                    };
                }
            }

            // –í–∞—Ä–∏–∞–Ω—Ç 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const authHeader = req.headers.authorization;
            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                return { success: false, error: 'No valid token provided. Use Authorization: Bearer <token> or X-Tenant-ID header' };
            }

            const token = authHeader.substring(7);

            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å mock —Ç–æ–∫–µ–Ω–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–Ω–∞–Ω—Ç
            if (token === 'valid-token') {
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–µ–Ω–∞–Ω—Ç –∏–∑ –ë–î
                const allTenants = await this.tenantsService.getAllTenants();
                if (allTenants && allTenants.length > 0) {
                    const firstTenant = allTenants[0];
                    console.log(`üîç [Proxy] The first tenant from the database is used: ${firstTenant.tenantId}`);
                    return {
                        success: true,
                        tenantId: firstTenant.tenantId,
                        userId: 'mock-user',
                        source: 'mock-token-first-tenant'
                    };
                }
                // –ï—Å–ª–∏ —Ç–µ–Ω–∞–Ω—Ç–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π mock
                return {
                    success: true,
                    tenantId: 'tenant123',
                    userId: 'user456',
                    source: 'mock-token'
                };
            }

            // –í–∞—Ä–∏–∞–Ω—Ç 3: –†–µ–∞–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
            try {
                // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–∞ –ø–æ–∫–∞)
                const decoded = this.jwtService.decode(token) as any;
                if (decoded && decoded.userId) {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ tenantId
                    const user = await this.usersService.getUserById(decoded.userId);
                    if (user && user.tenantId) {
                        console.log(`üîç [Proxy] The tenantId from the JWT token is used: ${user.tenantId}`);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
                        const secret = await this.authService.fetchAccessTokenSecretSigningKey(user.tenantId);
                        await this.jwtService.verify(token, { secret });

                        return {
                            success: true,
                            tenantId: user.tenantId,
                            userId: decoded.userId,
                            source: 'jwt-token'
                        };
                    }
                }
            } catch (jwtError) {
                console.log(`‚ö†Ô∏è [Proxy] JWT token validation error: ${jwtError.message}`);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            }

            return { success: false, error: 'Invalid token. Provide valid JWT token or X-Tenant-ID header' };
        } catch (error) {
            console.error('‚ùå [Proxy] Authentication error:', error);
            return { success: false, error: `Authentication failed: ${error.message}` };
        }
    }

    private async checkTenant(req: express.Request, tenantId: string) {
        try {
            const tenant = await this.tenantsService.getTenantById(tenantId);

            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å mock —Ç–æ–∫–µ–Ω–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ç–µ–Ω–∞–Ω—Ç–∞ –Ω–µ—Ç
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if (!tenant) {
                console.log(`‚ö†Ô∏è [Proxy] –¢–µ–Ω–∞–Ω—Ç ${tenantId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                return {
                    success: true,
                    tenant: { tenantId },
                    warning: 'Tenant not found in DB, proceeding for testing'
                };
            }

            return { success: true, tenant };
        } catch (error) {
            console.error('‚ùå [Proxy] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–Ω–∞–Ω—Ç–∞:', error);
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            return {
                success: true,
                tenant: { tenantId },
                warning: 'Tenant validation error, proceeding for testing'
            };
        }
    }

    private async checkDataLimits(req: express.Request, tenantId: string) {
        try {
            const operation = this.detectOperation(req);
            const dataSize = this.calculateDataSize(req);

            // ‚úÖ –°–æ–∑–¥–∞–µ–º context –¥–ª—è audit logging
            const context = {
                requestId: `proxy-${Date.now()}`,
                method: req.method,
                endpoint: req.path,
                ipAddress: req.ip,
                userAgent: req.headers['user-agent']
            };

            console.log('üîç [Limits] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤:', {
                tenantId,
                operation: operation.type,
                documents: operation.documents,
                dataSizeKB: dataSize
            });

            // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º context –≤ –∫–∞–∂–¥—ã–π check –º–µ—Ç–æ–¥
            if (operation.documents > 0) {
                await this.limitsService.checkDocumentsLimit(
                    tenantId,
                    operation.documents,
                    context  // ‚Üê –î–û–ë–ê–í–ò–¢–¨!
                );
            }

            if (dataSize > 0) {
                await this.limitsService.checkDataSizeLimit(
                    tenantId,
                    dataSize,
                    context  // ‚Üê –î–û–ë–ê–í–ò–¢–¨!
                );
            }

            await this.limitsService.checkQueriesLimit(
                tenantId,
                context  // ‚Üê –î–û–ë–ê–í–ò–¢–¨!
            );

            console.log('‚úÖ [Limits] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã');
            return { success: true };
        } catch (error) {
            console.log('‚ùå [Limits] –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω:', error.message);
            return {
                success: false,
                error: 'Data limits exceeded',
                details: error.message
            };
        }
    }

    private modifyRequest(req: express.Request, tenantId: string): any {
        const modifiedBody = { ...req.body };
        if (modifiedBody.filter) {
            modifiedBody.filter = {
                ...modifiedBody.filter,
                tenantId: tenantId
            };
        } else {
            modifiedBody.filter = { tenantId: tenantId };
        }

        if (modifiedBody.limit && modifiedBody.limit > 1000) {
            modifiedBody.limit = 1000;
        }

        console.log('üîß [Proxy] –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', {
            original: req.body,
            modified: modifiedBody
        });

        return modifiedBody;
    }

    private async forwardToMongoDB(req: express.Request, tenantId: string, body: any) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —Ç–µ–Ω–∞–Ω—Ç–∞
            const connection = await (this.tenantConnectionService as any).getTenantConnection(
                tenantId
            );
            const collectionName = this.extractCollectionName(req.path);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é MongoDB (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π)
            // –î–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å, –Ω–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º collection
            const collection = connection.collection(collectionName);

            let result;
            switch (req.method) {
                case 'GET':
                case 'POST':
                    if (body.operation === 'find') {
                        // –£–±–∏—Ä–∞–µ–º tenantId –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –≤ –±–∞–∑–µ —Ç–µ–Ω–∞–Ω—Ç–∞
                        const filter = { ...body.filter };
                        delete filter.tenantId; // tenantId —É–∂–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–µ

                        const cursor = collection.find(filter || {});
                        if (body.limit) {
                            cursor.limit(body.limit);
                        }
                        result = await cursor.toArray();
                    } else if (body.operation === 'insertOne') {
                        // –£–±–∏—Ä–∞–µ–º tenantId –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–æ–Ω —É–∂–µ –≤ –±–∞–∑–µ)
                        const document = { ...body.document };
                        delete document.tenantId;
                        result = await collection.insertOne(document);
                    } else if (body.operation === 'insertMany') {
                        // –£–±–∏—Ä–∞–µ–º tenantId –∏–∑ –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        const documents = body.documents.map((doc: any) => {
                            const cleanDoc = { ...doc };
                            delete cleanDoc.tenantId;
                            return cleanDoc;
                        });
                        result = await collection.insertMany(documents);
                    } else if (body.operation === 'updateOne') {
                        // –£–±–∏—Ä–∞–µ–º tenantId –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
                        const filter = { ...body.filter };
                        delete filter.tenantId;
                        result = await collection.updateOne(
                            filter,
                            body.update
                        );
                    } else if (body.operation === 'deleteOne') {
                        // –£–±–∏—Ä–∞–µ–º tenantId –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
                        const filter = { ...body.filter };
                        delete filter.tenantId;
                        result = await collection.deleteOne(filter);
                    } else {
                        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - find
                        const filter = { ...body.filter };
                        delete filter.tenantId;
                        result = await collection.find(filter || {}).toArray();
                    }
                    break;
                default:
                    throw new Error(`Unsupported method: ${req.method}`);
            }

            console.log('‚úÖ [Proxy] MongoDB –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
                operation: body.operation,
                documentsCount: Array.isArray(result) ? result.length : 1,
                success: true
            });

            return {
                success: true,
                data: result,
                operation: body.operation,
                tenantId: body.filter?.tenantId
            };

        } catch (error) {
            console.error('‚ùå [Proxy] MongoDB –æ—à–∏–±–∫–∞:', error);
            throw error;
        }
    }

    private async logRequest(req: express.Request, tenantId: string, response: any) {
        try {
            await this.auditService.emit({
                timestamp: new Date().toISOString(),
                level: 'info',
                requestId: `proxy-${Date.now()}`,
                tenantId: tenantId,
                method: req.method,
                path: req.path,
                statusCode: 200,
                durationMs: 0,
                message: `Proxy request processed for tenant ${tenantId}`,
                eventType: 'PATIENT_READ',
                requestBody: req.body,
                responseBody: response,
                metadata: {
                    service: 'HttpProxyServer',
                    action: 'forwardRequest',
                    operation: req.body.operation
                }
            });
        } catch (error) {
            console.error('‚ùå [Audit] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        }
    }

    private detectOperation(req: express.Request) {
        const operation = req.body.operation || 'find';
        let documents = 1;

        switch (operation) {
            case 'insertMany':
                documents = req.body.documents?.length || 1;
                break;
            case 'find':
                documents = 0;
                break;
            default:
                documents = 1;
        }

        return { type: operation, documents };
    }

    private calculateDataSize(req: express.Request): number {
        const bodySize = JSON.stringify(req.body).length;
        return Math.ceil(bodySize / 1024);
    }

    private extractCollectionName(path: string): string {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –ø—É—Ç–∏ /mongo/patients -> patients
        const parts = path.split('/').filter(p => p); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
        const collectionName = parts[parts.length - 1] || 'default';

        // Mongoose –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        // Patient -> patients, –Ω–æ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        console.log(`üîç [Proxy] –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –ø—É—Ç–∏ ${path}: ${collectionName}`);
        return collectionName;
    }

    public start(port: number = 3001) {
        this.app.listen(port, () => {
            console.log(`üöÄ [HTTP Proxy] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            console.log(`üì° [HTTP Proxy] MongoDB Proxy: http://localhost:${port}/mongo/*`);
            console.log(`üè• [HTTP Proxy] Health Check: http://localhost:${port}/proxy/health`);
        });
    }

    public getApp() {
        return this.app;
    }
}

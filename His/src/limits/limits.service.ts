/* eslint-disable prettier/prettier */
import { Injectable, ForbiddenException } from '@nestjs/common';
import { InjectConnection } from '@nestjs/mongoose';
import { Connection } from 'mongoose';
import { DataLimit, DataLimitSchema } from './limits.schema';
import { DataUsage, DataUsageSchema } from './usage.schema';
import { AuditService } from '../audit/audit.service';
import { AuditEvent, LimitViolationEvent, LimitWarningEvent } from '../audit/audit-event.dto';

export interface RequestContext {
    requestId?: string;
    userId?: string;
    userAgent?: string;
    ipAddress?: string;
    endpoint?: string;
    method?: string;
}

/**
 * üîí LIMITS SERVICE with ATOMIC OPERATIONS
 * 
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Race Conditions —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ atomic MongoDB operations
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * 1. checkDocumentsLimit - –∞—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ findOneAndUpdate
 * 2. checkDataSizeLimit - —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
 * 3. checkQueriesLimit - –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
 * 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ updateUsage
 */
@Injectable()
export class LimitsService {
    private readonly limitsModel;
    private readonly usageModel;

    constructor(
        @InjectConnection() private connection: Connection,
        private readonly auditService: AuditService
    ) {
        this.limitsModel = this.connection.model(DataLimit.name, DataLimitSchema);
        this.usageModel = this.connection.model(DataUsage.name, DataUsageSchema);
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ ATOMIC OPERATION
     * 
     * –°–¢–ê–†–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:
     * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–∏ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
     * - –î–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –º–æ–≥–ª–∏ –æ–±–æ–π—Ç–∏ –ª–∏–º–∏—Ç
     * 
     * –ù–û–í–û–ï –†–ï–®–ï–ù–ò–ï:
     * - –ò—Å–ø–æ–ª—å–∑—É–µ–º findOneAndUpdate —Å —É—Å–ª–æ–≤–∏–µ–º
     * - MongoDB –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å
     * - –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏ –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
     * 
     * @param tenantId - ID tenant'–∞
     * @param incomingDocsCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
     * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è audit
     */
    async checkDocumentsLimit(
        tenantId: string,
        incomingDocsCount: number = 1,
        context?: RequestContext
    ): Promise<void> {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (incomingDocsCount < 0) {
            throw new ForbiddenException('Document count cannot be negative');
        }

        if (incomingDocsCount > 1000) {
            throw new ForbiddenException('Cannot add more than 1000 documents at once');
        }

        const limit = await this.limitsModel.findOne({ tenantId }).exec();

        if (!limit) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return;
        }

        // ‚úÖ ATOMIC OPERATION: –ü—Ä–æ–≤–µ—Ä–∫–∞ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
        // MongoDB –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∞—Ç–æ–º–∞—Ä–Ω–æ
        const updatedUsage = await this.usageModel.findOneAndUpdate(
            {
                tenantId,
                // –£–°–õ–û–í–ò–ï: –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?
                documentsCount: { $lte: limit.maxDocuments - incomingDocsCount }
            },
            {
                // –î–ï–ô–°–¢–í–ò–ï: –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
                $inc: { documentsCount: incomingDocsCount }
            },
            {
                new: true,  // –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                upsert: false  // –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            }
        ).exec();

        // –ï—Å–ª–∏ updatedUsage === null, –∑–Ω–∞—á–∏—Ç —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å (–ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω)
        if (!updatedUsage) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏
            const currentUsage = await this.usageModel.findOne({ tenantId }).exec() ||
                await this.usageModel.create({ tenantId });

            const percentage = Math.round(
                ((currentUsage.documentsCount + incomingDocsCount) / limit.maxDocuments) * 100
            );

            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            await this.emitLimitViolation(tenantId, 'DOCUMENTS', {
                currentValue: currentUsage.documentsCount,
                limitValue: limit.maxDocuments,
                attemptedValue: incomingDocsCount,
                percentage
            }, context);

            throw new ForbiddenException({
                message: `Document limit exceeded. Current: ${currentUsage.documentsCount}, Limit: ${limit.maxDocuments}, Attempted to add: ${incomingDocsCount}`,
                error: 'DOCUMENT_LIMIT_EXCEEDED',
                details: {
                    current: currentUsage.documentsCount,
                    limit: limit.maxDocuments,
                    attempted: incomingDocsCount,
                    percentage
                }
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 90% –¥–ª—è warning
        const percentage = Math.round((updatedUsage.documentsCount / limit.maxDocuments) * 100);

        if (percentage >= 90 && (updatedUsage.documentsCount - incomingDocsCount) < limit.maxDocuments * 0.9) {
            await this.emitLimitWarning(tenantId, 'DOCUMENTS', {
                currentValue: updatedUsage.documentsCount,
                limitValue: limit.maxDocuments,
                percentage
            }, context);
        }
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ATOMIC OPERATION
     * 
     * –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ checkDocumentsLimit, –Ω–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ KB
     */
    async checkDataSizeLimit(
        tenantId: string,
        incomingDataSizeKB: number,
        context?: RequestContext
    ): Promise<void> {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (incomingDataSizeKB < 0) {
            throw new ForbiddenException('Data size cannot be negative');
        }

        if (incomingDataSizeKB > 10240) {  // 10MB max –∑–∞ —Ä–∞–∑
            throw new ForbiddenException('Cannot add more than 10MB at once');
        }

        const limit = await this.limitsModel.findOne({ tenantId }).exec();

        if (!limit) {
            return;
        }

        // ‚úÖ ATOMIC OPERATION
        const updatedUsage = await this.usageModel.findOneAndUpdate(
            {
                tenantId,
                dataSizeKB: { $lte: limit.maxDataSizeKB - incomingDataSizeKB }
            },
            {
                $inc: { dataSizeKB: incomingDataSizeKB }
            },
            {
                new: true,
                upsert: false
            }
        ).exec();

        if (!updatedUsage) {
            const currentUsage = await this.usageModel.findOne({ tenantId }).exec() ||
                await this.usageModel.create({ tenantId });

            const percentage = Math.round(
                ((currentUsage.dataSizeKB + incomingDataSizeKB) / limit.maxDataSizeKB) * 100
            );

            await this.emitLimitViolation(tenantId, 'DATA_SIZE', {
                currentValue: currentUsage.dataSizeKB,
                limitValue: limit.maxDataSizeKB,
                attemptedValue: incomingDataSizeKB,
                percentage
            }, context);

            throw new ForbiddenException({
                message: `Data size limit exceeded. Current: ${currentUsage.dataSizeKB}KB, Limit: ${limit.maxDataSizeKB}KB, Attempted: ${incomingDataSizeKB}KB`,
                error: 'DATA_SIZE_LIMIT_EXCEEDED',
                details: {
                    current: currentUsage.dataSizeKB,
                    limit: limit.maxDataSizeKB,
                    attempted: incomingDataSizeKB,
                    percentage
                }
            });
        }

        // Warning –Ω–∞ 90%
        const percentage = Math.round((updatedUsage.dataSizeKB / limit.maxDataSizeKB) * 100);

        if (percentage >= 90 && (updatedUsage.dataSizeKB - incomingDataSizeKB) < limit.maxDataSizeKB * 0.9) {
            await this.emitLimitWarning(tenantId, 'DATA_SIZE', {
                currentValue: updatedUsage.dataSizeKB,
                limitValue: limit.maxDataSizeKB,
                percentage
            }, context);
        }
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ ATOMIC OPERATION
     * 
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—Ç–æ–º–∞—Ä–Ω–æ
     */
    async checkQueriesLimit(tenantId: string, context?: RequestContext): Promise<void> {
        const limit = await this.limitsModel.findOne({ tenantId }).exec();

        if (!limit) {
            return;
        }

        // ‚úÖ ATOMIC OPERATION
        const updatedUsage = await this.usageModel.findOneAndUpdate(
            {
                tenantId,
                queriesCount: { $lt: limit.monthlyQueries }  // –°—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–µ
            },
            {
                $inc: { queriesCount: 1 }
            },
            {
                new: true,
                upsert: false
            }
        ).exec();

        if (!updatedUsage) {
            const currentUsage = await this.usageModel.findOne({ tenantId }).exec() ||
                await this.usageModel.create({ tenantId });

            const percentage = Math.round(
                ((currentUsage.queriesCount + 1) / limit.monthlyQueries) * 100
            );

            await this.emitLimitViolation(tenantId, 'QUERIES', {
                currentValue: currentUsage.queriesCount,
                limitValue: limit.monthlyQueries,
                attemptedValue: 1,
                percentage
            }, context);

            throw new ForbiddenException({
                message: `Query limit exceeded. Current: ${currentUsage.queriesCount}, Limit: ${limit.monthlyQueries}`,
                error: 'QUERY_LIMIT_EXCEEDED',
                details: {
                    current: currentUsage.queriesCount,
                    limit: limit.monthlyQueries,
                    attempted: 1,
                    percentage
                }
            });
        }

        // Warning –Ω–∞ 90%
        const percentage = Math.round((updatedUsage.queriesCount / limit.monthlyQueries) * 100);

        if (percentage >= 90 && (updatedUsage.queriesCount - 1) < limit.monthlyQueries * 0.9) {
            await this.emitLimitWarning(tenantId, 'QUERIES', {
                currentValue: updatedUsage.queriesCount,
                limitValue: limit.monthlyQueries,
                percentage
            }, context);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≤ audit —Å–∏—Å—Ç–µ–º—É
     */
    private async emitLimitViolation(
        tenantId: string,
        limitType: 'DOCUMENTS' | 'DATA_SIZE' | 'QUERIES',
        limitData: any,
        context?: RequestContext
    ): Promise<void> {
        try {
            const event: LimitViolationEvent = {
                timestamp: new Date().toISOString(),
                level: 'error',
                requestId: context?.requestId || `limit-${Date.now()}`,
                userId: context?.userId,
                tenantId,
                method: context?.method || 'INTERNAL',
                path: context?.endpoint || '/limits/check',
                statusCode: 403,
                durationMs: 0,
                ip: context?.ipAddress,
                userAgent: context?.userAgent,
                message: `${limitType} limit exceeded for tenant ${tenantId}`,
                eventType: 'LIMIT_EXCEEDED',
                limitType,
                limitData,
                metadata: {
                    service: 'LimitsService',
                    action: 'checkLimit',
                    severity: 'HIGH'
                }
            };

            this.auditService.emit(event);
        } catch (error) {
            console.error('Failed to emit limit violation audit event:', error);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
     */
    private async emitLimitWarning(
        tenantId: string,
        limitType: 'DOCUMENTS' | 'DATA_SIZE' | 'QUERIES',
        limitData: any,
        context?: RequestContext
    ): Promise<void> {
        try {
            const event: LimitWarningEvent = {
                timestamp: new Date().toISOString(),
                level: 'warn',
                requestId: context?.requestId || `limit-warning-${Date.now()}`,
                userId: context?.userId,
                tenantId,
                method: context?.method || 'INTERNAL',
                path: context?.endpoint || '/limits/check',
                statusCode: 200,
                durationMs: 0,
                ip: context?.ipAddress,
                userAgent: context?.userAgent,
                message: `${limitType} limit warning (90% reached) for tenant ${tenantId}`,
                eventType: 'LIMIT_WARNING',
                limitType,
                limitData,
                metadata: {
                    service: 'LimitsService',
                    action: 'checkLimit',
                    severity: 'MEDIUM'
                }
            };

            this.auditService.emit(event);
        } catch (error) {
            console.error('Failed to emit limit warning audit event:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è tenant'–∞
     */
    async setLimitsForTenant(tenantId: string, newLimits: any, context?: RequestContext): Promise<any> {
        const oldLimits = await this.limitsModel.findOne({ tenantId }).exec();

        const result = await this.limitsModel.findOneAndUpdate(
            { tenantId },
            newLimits,
            { upsert: true, new: true }
        ).exec();

        try {
            const event: AuditEvent = {
                timestamp: new Date().toISOString(),
                level: 'info',
                requestId: context?.requestId || `limit-update-${Date.now()}`,
                userId: context?.userId,
                tenantId,
                method: context?.method || 'PUT',
                path: context?.endpoint || `/limits/${tenantId}`,
                statusCode: 200,
                durationMs: 0,
                ip: context?.ipAddress,
                userAgent: context?.userAgent,
                message: `Limits updated for tenant ${tenantId}`,
                eventType: 'LIMIT_UPDATED',
                requestBody: newLimits,
                responseBody: result,
                metadata: {
                    service: 'LimitsService',
                    action: 'updateLimits',
                    oldLimits: oldLimits?.toObject() || null,
                    newLimits: result.toObject()
                }
            };

            this.auditService.emit(event);
        } catch (error) {
            console.error('Failed to emit limit update audit event:', error);
        }

        return result;
    }

    /**
     * ‚ö†Ô∏è DEPRECATED: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!
     * 
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ usage —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ –≤–Ω—É—Ç—Ä–∏ check* –º–µ—Ç–æ–¥–æ–≤.
     * –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.
     * 
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ check* –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
     */
    async updateUsage(tenantId: string, docsCount: number, dataSizeKB: number): Promise<void> {
        // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if (docsCount < 0 || dataSizeKB < 0) {
            throw new ForbiddenException('Usage values cannot be negative');
        }

        await this.usageModel.findOneAndUpdate(
            { tenantId },
            {
                $inc: {
                    documentsCount: docsCount,
                    dataSizeKB: dataSizeKB,
                    queriesCount: 1
                }
            },
            { upsert: true }
        ).exec();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è tenant'–∞
     */
    async getLimitsForTenant(tenantId: string): Promise<any> {
        let limits = await this.limitsModel.findOne({ tenantId }).exec();

        if (!limits) {
            limits = await this.limitsModel.create({
                tenantId,
                maxDocuments: 1000,
                maxDataSizeKB: 51200,
                monthlyQueries: 1000
            });
        }

        return limits;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è tenant'–∞
     */
    async getUsageForTenant(tenantId: string): Promise<any> {
        let usage = await this.usageModel.findOne({ tenantId }).exec();

        if (!usage) {
            usage = await this.usageModel.create({
                tenantId,
                documentsCount: 0,
                dataSizeKB: 0,
                queriesCount: 0
            });
        }

        return usage;
    }
}
#!/usr/bin/env node

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const PROXY_URL = 'http://localhost:3001';

const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

async function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function testProxy() {
    log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP Reverse Proxy...\n', 'bright');
    
    let passedTests = 0;
    let totalTests = 0;

    try {
        totalTests++;
        log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä...', 'blue');
        try {
            const healthResponse = await axios.get(`${BASE_URL}/proxy/health`);
            log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', 'green');
            console.log(JSON.stringify(healthResponse.data, null, 2));
            passedTests++;
        } catch (error) {
            log('‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', 'red');
            log(`   –û—à–∏–±–∫–∞: ${error.message}`, 'red');
            log('   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run start:dev', 'yellow');
            return;
        }

        totalTests++;
        log('\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP Reverse Proxy —Å–µ—Ä–≤–µ—Ä...', 'blue');
        try {
            const startResponse = await axios.post(`${BASE_URL}/proxy/start`);
            log('‚úÖ HTTP Reverse Proxy –∑–∞–ø—É—â–µ–Ω:', 'green');
            console.log(JSON.stringify(startResponse.data, null, 2));
            passedTests++;
        } catch (error) {
            log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP Reverse Proxy:', 'red');
            log(`   –û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`, 'red');
        }

        log('\n‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ HTTP Reverse Proxy —Å–µ—Ä–≤–µ—Ä–∞...', 'yellow');
        await wait(3000);

        totalTests++;
        log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP Reverse Proxy —Å–µ—Ä–≤–µ—Ä...', 'blue');
        try {
            const proxyHealthResponse = await axios.get(`${PROXY_URL}/proxy/health`);
            log('‚úÖ HTTP Reverse Proxy —Ä–∞–±–æ—Ç–∞–µ—Ç:', 'green');
            console.log(JSON.stringify(proxyHealthResponse.data, null, 2));
            passedTests++;
        } catch (error) {
            log('‚ùå HTTP Reverse Proxy –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', 'red');
            log(`   –û—à–∏–±–∫–∞: ${error.message}`, 'red');
            log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω', 'yellow');
            return;
        }

        log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Reverse Proxy...', 'blue');
        
        const httpTests = [
            {
                name: 'GET –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 401)',
                method: 'GET',
                url: '/proxy/api/test',
                expectedStatus: 401
            },
            {
                name: 'GET –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (–æ–∂–∏–¥–∞–µ—Ç—Å—è 401)',
                method: 'GET',
                url: '/proxy/api/test',
                headers: { 'Authorization': 'Bearer invalid-token' },
                expectedStatus: 401
            },
            {
                name: 'POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 401)',
                method: 'POST',
                url: '/proxy/api/test',
                data: { test: 'data' },
                expectedStatus: 401
            },
            {
                name: 'PUT –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 401)',
                method: 'PUT',
                url: '/proxy/api/test/123',
                data: { test: 'data' },
                expectedStatus: 401
            },
            {
                name: 'DELETE –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 401)',
                method: 'DELETE',
                url: '/proxy/api/test/123',
                expectedStatus: 401
            }
        ];

        for (const test of httpTests) {
            totalTests++;
            try {
                log(`\n   üîç ${test.name}`, 'cyan');
                
                const response = await axios({
                    method: test.method,
                    url: `${PROXY_URL}${test.url}`,
                    headers: test.headers || {},
                    data: test.data || undefined,
                    validateStatus: () => true
                });

                if (response.status === test.expectedStatus) {
                    log(`   ‚úÖ –ü–†–û–ô–î–ï–ù (—Å—Ç–∞—Ç—É—Å: ${response.status})`, 'green');
                    passedTests++;
                } else {
                    log(`   ‚ö†Ô∏è –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô –°–¢–ê–¢–£–° (${response.status}, –æ–∂–∏–¥–∞–ª—Å—è ${test.expectedStatus})`, 'yellow');
                }
            } catch (error) {
                if (error.response?.status === test.expectedStatus) {
                    log(`   ‚úÖ –ü–†–û–ô–î–ï–ù (—Å—Ç–∞—Ç—É—Å: ${error.response.status})`, 'green');
                    passedTests++;
                } else {
                    log(`   ‚ùå –ü–†–û–í–ê–õ–ï–ù (${error.response?.status || 'ERROR'})`, 'red');
                    log(`      –û—à–∏–±–∫–∞: ${error.message}`, 'red');
                }
            }
        }

        totalTests++;
        log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π API (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)...', 'blue');
        try {
            const oldApiResponse = await axios.post(`${BASE_URL}/proxy/test`, {}, {
                headers: {
                    'X-Tenant-ID': 'tenant123',
                    'Authorization': 'Bearer valid-token'
                },
                validateStatus: () => true
            });
            
            if (oldApiResponse.status === 200) {
                log('‚úÖ –°—Ç–∞—Ä—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç:', 'green');
                console.log(JSON.stringify(oldApiResponse.data, null, 2));
                passedTests++;
            } else {
                log(`‚ö†Ô∏è –°—Ç–∞—Ä—ã–π API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${oldApiResponse.status}:`, 'yellow');
                console.log(JSON.stringify(oldApiResponse.data, null, 2));
                passedTests++;
            }
        } catch (error) {
            log('‚ö†Ô∏è –°—Ç–∞—Ä—ã–π API (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞):', 'yellow');
            log(`   ${error.response?.data?.error || error.message}`, 'yellow');
            passedTests++;
        }
        log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ HTTP –º–µ—Ç–æ–¥—ã...', 'blue');
        
        const methods = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'];
        for (const method of methods) {
            totalTests++;
            try {
                log(`   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º ${method} –º–µ—Ç–æ–¥`, 'cyan');
                
                const response = await axios({
                    method: method,
                    url: `${PROXY_URL}/proxy/api/test`,
                    validateStatus: () => true
                });

                if (response.status === 401) {
                    log(`   ‚úÖ ${method} –º–µ—Ç–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: 401)`, 'green');
                    passedTests++;
                } else {
                    log(`   ‚ö†Ô∏è ${method} –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`, 'yellow');
                }
            } catch (error) {
                if (error.response?.status === 401) {
                    log(`   ‚úÖ ${method} –º–µ—Ç–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: 401)`, 'green');
                    passedTests++;
                } else {
                    log(`   ‚ùå ${method} –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.message}`, 'red');
                }
            }
        }

        log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n', 'bright');
        log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', 'bright');
        log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`, passedTests === totalTests ? 'green' : 'yellow');
        
        if (passedTests === totalTests) {
            log('üéä –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'green');
        } else {
            log(`‚ö†Ô∏è ${totalTests - passedTests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ`, 'yellow');
        }

        log('\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:', 'bright');
        log(`- –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: ${BASE_URL}`, 'cyan');
        log(`- HTTP Reverse Proxy: ${PROXY_URL}`, 'cyan');
        log(`- Health check: ${PROXY_URL}/proxy/health`, 'cyan');
        log(`- Proxy endpoint: ${PROXY_URL}/proxy/*`, 'cyan');

        log('\nüìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:', 'bright');
        log('- –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: HOW_TO_TEST_PROXY.md', 'cyan');
        log('- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: HTTP_REVERSE_PROXY_GUIDE.md', 'cyan');

        log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'bright');
        log('1. –ü–æ–ª—É—á–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /auth/login', 'yellow');
        log('2. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', 'yellow');
        log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ü–µ–ª–µ–≤—ã–µ URL –¥–ª—è –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤', 'yellow');
        log('4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏', 'yellow');

    } catch (error) {
        log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', 'red');
        log(`   ${error.message}`, 'red');
        log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:', 'yellow');
        log('1. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run start:dev', 'yellow');
        log('2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install', 'yellow');
        log('3. MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞', 'yellow');
        log('4. –ü–æ—Ä—Ç—ã 3000 –∏ 3001 —Å–≤–æ–±–æ–¥–Ω—ã', 'yellow');
    }
}

if (require.main === module) {
    testProxy();
}

module.exports = { testProxy };


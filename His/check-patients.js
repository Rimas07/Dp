const mongoose = require('mongoose');

// –°—Ö–µ–º—ã
const tenantSchema = new mongoose.Schema({
    companyName: { type: String, required: true },
    tenantId: { type: String, required: true }
});

const patientSchema = new mongoose.Schema({
    name: { type: String, required: true },
    surname: { type: String, required: true },
    age: { type: String, required: true }
});

async function checkPatients() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
        await mongoose.connect('mongodb://localhost:27017/defaultdb');
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–Ω–∞–Ω—Ç—ã
        const Tenant = mongoose.model('Tenant', tenantSchema);
        const tenants = await Tenant.find();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–∞–Ω—Ç–æ–≤: ${tenants.length}`);

        let totalPatients = 0;

        for (const tenant of tenants) {
            console.log(`\nüè¢ –¢–µ–Ω–∞–Ω—Ç: ${tenant.companyName} (ID: ${tenant.tenantId})`);
            
            try {
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–Ω–∞–Ω—Ç–∞
                const tenantDb = mongoose.connection.useDb(`tenant_${tenant.tenantId}`);
                const Patient = tenantDb.model('Patient', patientSchema);
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
                const patientCount = await Patient.countDocuments();
                console.log(`   üë• –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: ${patientCount}`);
                
                if (patientCount > 0) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
                    const patients = await Patient.find().limit(3);
                    patients.forEach(patient => {
                        console.log(`   - ${patient.name} ${patient.surname}, –≤–æ–∑—Ä–∞—Å—Ç: ${patient.age}`);
                    });
                }
                
                totalPatients += patientCount;
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }

        console.log(`\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: ${totalPatients}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    }
}

checkPatients();


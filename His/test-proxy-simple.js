/**
 * üß™ –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP Proxy
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: npm run start:dev
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç: node test-proxy-simple.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const PROXY_URL = 'http://localhost:3001';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
function log(step, message, isError = false) {
    const emoji = isError ? '‚ùå' : '‚úÖ';
    const prefix = step ? `${step}. ` : '';
    console.log(`${emoji} ${prefix}${message}`);
}

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function testProxy() {
    console.log('\nüöÄ ============================================');
    console.log('   –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï HTTP PROXY');
    console.log('============================================\n');

    try {
        // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
        log(1, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3000)...');
        try {
            const health1 = await axios.get(`${BASE_URL}/proxy/health`, { timeout: 5000 });
            log(null, `–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${health1.data.status}`, false);
        } catch (error) {
            log(null, '–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!', true);
            console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run start:dev\n');
            return;
        }

        // –®–ê–ì 2: –ó–∞–ø—É—Å–∫–∞–µ–º HTTP Proxy
        log(2, '–ó–∞–ø—É—Å–∫–∞–µ–º HTTP Proxy —Å–µ—Ä–≤–µ—Ä...');
        try {
            const start = await axios.post(`${BASE_URL}/proxy/start`, {}, { timeout: 5000 });
            log(null, `HTTP Proxy –∑–∞–ø—É—â–µ–Ω: ${start.data.message}`, false);
            console.log('   üì° Endpoints:', JSON.stringify(start.data.endpoints, null, 2));
        } catch (error) {
            log(null, `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP Proxy: ${error.message}`, true);
            return;
        }

        // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        log(null, '–ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...');
        await sleep(2000);

        // –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP Proxy
        log(3, '–ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP Proxy —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3001)...');
        try {
            const health2 = await axios.get(`${PROXY_URL}/proxy/health`, { timeout: 5000 });
            log(null, `HTTP Proxy —Ä–∞–±–æ—Ç–∞–µ—Ç: ${health2.data.status}`, false);
        } catch (error) {
            log(null, `HTTP Proxy –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.message}`, true);
            console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω\n');
            return;
        }

        // –®–ê–ì 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º MongoDB –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Proxy
        log(4, '–¢–µ—Å—Ç–∏—Ä—É–µ–º MongoDB –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Proxy...');
        try {
            const mongoRequest = {
                operation: 'find',
                filter: { name: 'Test Patient' },
                limit: 10
            };

            const mongo = await axios.post(
                `${PROXY_URL}/mongo/patients`,
                mongoRequest,
                {
                    headers: {
                        'Authorization': 'Bearer valid-token',
                        'Content-Type': 'application/json'
                    },
                    timeout: 10000
                }
            );

            log(null, `MongoDB –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!`, false);
            console.log('   üìä –û–ø–µ—Ä–∞—Ü–∏—è:', mongo.data.operation);
            console.log('   üè¢ TenantId:', mongo.data.tenantId || 'N/A');
            console.log('   üì¶ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤:', Array.isArray(mongo.data.data) ? mongo.data.data.length : 1);
        } catch (error) {
            if (error.response) {
                log(null, `MongoDB –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${error.response.status}`, true);
                console.log('   üìã –î–µ—Ç–∞–ª–∏:', JSON.stringify(error.response.data, null, 2));
                
                // –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if (error.response.status === 401) {
                    console.log('\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
                } else if (error.response.status === 403) {
                    console.log('\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ tenantId');
                } else if (error.response.status === 429) {
                    console.log('\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö');
                }
            } else {
                log(null, `MongoDB –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${error.message}`, true);
            }
        }

        // –®–ê–ì 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π API
        log(5, '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π API (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)...');
        try {
            const oldApi = await axios.post(
                `${BASE_URL}/proxy/test`,
                {},
                {
                    headers: {
                        'X-Tenant-ID': 'tenant123',
                        'Authorization': 'Bearer valid-token'
                    },
                    timeout: 5000
                }
            );

            log(null, `–°—Ç–∞—Ä—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${oldApi.data.message}`, false);
        } catch (error) {
            if (error.response) {
                log(null, `–°—Ç–∞—Ä—ã–π API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${error.response.status}`, true);
                console.log('   üìã –î–µ—Ç–∞–ª–∏:', JSON.stringify(error.response.data, null, 2));
            } else {
                log(null, `–°—Ç–∞—Ä—ã–π API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: ${error.message}`, true);
            }
        }

        // –ò–¢–û–ì–ò
        console.log('\n============================================');
        console.log('‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
        console.log('============================================\n');

        console.log('üìã –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é:');
        console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3001/proxy/health');
        console.log('   2. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≥–¥–µ –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä');
        console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Postman –∏–ª–∏ curl');
        console.log('\nüìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: HOW_TO_RUN_PROXY.md\n');

    } catch (error) {
        console.log('\n============================================');
        console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê');
        console.log('============================================\n');
        console.error('–û—à–∏–±–∫–∞:', error.message);
        console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('   1. –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run start:dev');
        console.log('   2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install');
        console.log('   3. MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        console.log('   4. –ü–æ—Ä—Ç—ã 3000 –∏ 3001 —Å–≤–æ–±–æ–¥–Ω—ã\n');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
    testProxy();
}

module.exports = { testProxy };


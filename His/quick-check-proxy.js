#!/usr/bin/env node

const axios = require('axios');

const PROXY_URL = 'http://localhost:3001';

async function quickCheck() {
    console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP Reverse Proxy...\n');

    try {
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º health check...');
        const health = await axios.get(`${PROXY_URL}/proxy/health`);
        console.log('‚úÖ Proxy —Ä–∞–±–æ—Ç–∞–µ—Ç:', health.data.status);

        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
        try {
            await axios.get(`${PROXY_URL}/proxy/api/test`);
            console.log('‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –±–µ–∑ —Ç–æ–∫–µ–Ω–∞!');
        } catch (error) {
            if (error.response?.status === 401) {
                console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (401)');
            } else {
                console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${error.response?.status}`);
            }
        }

        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
        try {
            await axios.get(`${PROXY_URL}/proxy/api/test`, {
                headers: { 'Authorization': 'Bearer invalid-token' }
            });
            console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç!');
        } catch (error) {
            if (error.response?.status === 401) {
                console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω (401)');
            } else {
                console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${error.response?.status}`);
            }
        }

        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –º–µ—Ç–æ–¥—ã...');
        const methods = ['GET', 'POST', 'PUT', 'DELETE'];
        let methodsWorking = 0;

        for (const method of methods) {
            try {
                await axios({
                    method: method,
                    url: `${PROXY_URL}/proxy/api/test`,
                    validateStatus: () => true
                });
            } catch (error) {
                if (error.response?.status === 401) {
                    console.log(`‚úÖ ${method} –º–µ—Ç–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
                    methodsWorking++;
                }
            }
        }

        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${methodsWorking}/${methods.length} –º–µ—Ç–æ–¥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);

        console.log('\nüéØ –ò—Ç–æ–≥:');
        console.log('‚úÖ HTTP Reverse Proxy —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ HTTP –º–µ—Ç–æ–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
        console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node test-proxy-enhanced.js');

    } catch (error) {
        console.log('‚ùå Proxy –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!');
        console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('1. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run start:dev');
        console.log('2. HTTP Reverse Proxy –∑–∞–ø—É—â–µ–Ω: POST /proxy/start');
        console.log('3. –ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω');
    }
}

quickCheck();


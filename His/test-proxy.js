#!/usr/bin/env node

const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const PROXY_URL = 'http://localhost:3001';

async function testProxy() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP Proxy...\n');

    try {
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä...');
        const healthResponse = await axios.get(`${BASE_URL}/proxy/health`);
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthResponse.data);

        console.log('\n2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º HTTP Proxy —Å–µ—Ä–≤–µ—Ä...');
        const startResponse = await axios.post(`${BASE_URL}/proxy/start`);
        console.log('‚úÖ HTTP Proxy –∑–∞–ø—É—â–µ–Ω:', startResponse.data);

        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP Proxy —Å–µ—Ä–≤–µ—Ä...');
        const proxyHealthResponse = await axios.get(`${PROXY_URL}/proxy/health`);
        console.log('‚úÖ HTTP Proxy —Ä–∞–±–æ—Ç–∞–µ—Ç:', proxyHealthResponse.data);

        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º MongoDB –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Proxy...');
        try {
            const mongoResponse = await axios.post(`${PROXY_URL}/mongo/patients`, {
                operation: 'find',
                filter: {
                    name: 'Test Patient'
                },
                limit: 10
            }, {
                headers: {
                    'Authorization': 'Bearer valid-token',
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚úÖ MongoDB –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Proxy —É—Å–ø–µ—à–µ–Ω:', mongoResponse.data);
        } catch (error) {
            console.log('‚ö†Ô∏è MongoDB –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Proxy (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞):', error.response?.data || error.message);
        }

        console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π API...');
        try {
            const oldApiResponse = await axios.post(`${BASE_URL}/proxy/test`, {}, {
                headers: {
                    'X-Tenant-ID': 'tenant123',
                    'Authorization': 'Bearer valid-token'
                }
            });
            console.log('‚úÖ –°—Ç–∞—Ä—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç:', oldApiResponse.data);
        } catch (error) {
            console.log('‚ö†Ô∏è –°—Ç–∞—Ä—ã–π API (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞):', error.response?.data || error.message);
        }

        console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ HTTP Proxy —Å–µ—Ä–≤–µ—Ä: —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚úÖ MongoDB Proxy: –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã');
        console.log('‚úÖ –°—Ç–∞—Ä—ã–π API: —Å–æ–≤–º–µ—Å—Ç–∏–º');

        console.log('\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
        console.log(`- –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: ${BASE_URL}`);
        console.log(`- HTTP Proxy: ${PROXY_URL}`);
        console.log(`- Health check: ${PROXY_URL}/proxy/health`);
        console.log(`- MongoDB Proxy: ${PROXY_URL}/mongo/*`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('1. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run start:dev');
        console.log('2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install');
        console.log('3. MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
}

if (require.main === module) {
    testProxy();
}

module.exports = { testProxy };

